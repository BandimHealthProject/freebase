diff --git a/app/assets/followScreen.html b/app/assets/followScreen.html
--- a/app/assets/followScreen.html
+++ b/app/assets/followScreen.html
@@ -47,11 +47,9 @@
 
       <div class="times-input">
         <form>
-          <select id='start-time-food-hours' class='food-edit food-select text'></select>
-          <select id='start-time-food-mins' class='food-edit food-select text' placeholder='Start Mins'></select>
+          <select id='start-time-food' class='food-edit food-select text' placeholder='Start Time'></select>
           <span> to </span>
-          <select id='end-time-food-hours' class='food-edit food-select text' placeholder='End Hour'></select>
-          <select id='end-time-food-mins' class='food-edit food-select text' placeholder='End Mins'></select>
+          <select id='end-time-food' class='food-edit food-select text' placeholder='End Time'></select>
         </form>
       </div>
 
@@ -335,11 +333,9 @@
 
       <div id="times-input-species">
         <form>
-          <select id='start-time-species-hours' class='species-edit species-select text'></select>
-          <select id='start-time-species-mins' class='species-edit species-select text' ></select>
+          <select id='start-time-species' class='species-edit species-select text'></select>
           <span> to </span>
-          <select id='end-time-species-hours' class='species-edit species-select text' ></select>
-          <select id='end-time-species-mins' class='species-edit species-select text' ></select>
+          <select id='end-time-species' class='species-edit species-select text' ></select>
         </form>
       </div>
 
@@ -992,13 +988,6 @@
           <label class="time depart" id="-10"style="padding-right: 1px;" for="so"><img src="./img/time_departSecond.png" style="width: 50px; height: 60px;"/></label>
           <label class="time depart" id= "-15"style="padding-right: 1px;" for="su"><img src="./img/time_departThird.png" style="width: 50px; height: 60px;"/></label>
           <label class="time depart" id="1" style="padding-right: 1px;" for="su"><img src="./img/time_continues.png" style="width: 50px; height: 60px;"/></label>
-
-          <!--<br />
-
-          <input type="radio" id="time1" name="time" value="0" style="margin-left:30px; margin-right:35px">
-          <input type="radio" id="time2" name="time" value="5" style="margin-right: 35px">
-          <input type="radio" id="time3" name="time" value="10" style="margin-right: 35px">
-          <input type="radio" id="time3" name="time" value="10" style="margin-right: 35px">-->
         </div>
 
 
diff --git a/app/assets/js/bundle.js b/app/assets/js/bundle.js
--- a/app/assets/js/bundle.js
+++ b/app/assets/js/bundle.js
@@ -1175,16 +1175,6 @@
   '56-2:45J'
 ];
 
-/**
- * Convert hours an mins integers to a zero-padded string. 1,5, would become:
- * '01:05'.
- */
-function convertToTime(hours, mins) {
-  var hoursStr = exports.convertToStringWithTwoZeros(hours);
-  var minsStr = exports.convertToStringWithTwoZeros(mins);
-  return hoursStr + ':' + minsStr;
-}
-
 
 function sortItemsWithDate(objects) {
   objects.sort(function(a, b) {
@@ -1231,16 +1221,13 @@
 };
 
 
+/**
+ * Convert a time like '14.01-12:12J' to a completely user-facing time.
+ */
 exports.getUserTimeFromDbTime = function(dbTime) {
-  var userTimes = exports.getAllTimesForUser();
-  var dbTimes = exports.getAllTimesForDb();
-
-  var index = dbTimes.indexOf(dbTime);
-  if (index < 0) {
-    throw 'Unrecognized db time: ' + dbTime;
-  }
-
-  return userTimes[index];
+  var dashIndex = dbTime.indexOf('-');
+  var result = dbTime.substring(dashIndex + 1);
+  return result;
 };
 
 
@@ -1290,24 +1277,62 @@
 
 
 /**
- * Get an array of the times that fall within an interval. If you passed
- * '7:00', this would return an array of ['mm', '7:00', '7:01', ..., '7:14'].
- */
-exports.getTimesInInterval = function(time) {
-  var interval = 15;
-  var parts = time.split(':');
-  var hours = parseInt(parts[0]);
-  var mins = parseInt(parts[1]);
-
-  var result = ['mm'];
-  // Fow now, assume our start times begin at 0, 15, 30, 45. This will prevent
-  // us having to worry about overflowing.
-  for (var i = 0; i < mins + interval; i++) {
-    var newMins = mins + i;
-    var nextTime = convertToTime(hours, newMins);
-    result.push(nextTime);
-  }
-  
+ * Take a database-facing time (e.g. 05-12:12J) and return an array of objects
+ * with a 'dbTime' and 'userTime' value, corresponding to time points in the
+ * interval specified by the dbTime parameter.
+ *
+ * The dbTime keys will have the prefix include '.00' to '.14' to accommodate
+ * direct string comparisons. For instance, the time '00-12:00A' would return
+ * an array like:
+ * [
+ *   {dbTime: 00.00-12:00A, userTime: 12:00A},
+ *   {dbTime: 00.01-12:01A, userTime: 12:01A},
+ *   ...
+ *   {dbTime: 00.14-12:14A, userTime: 12:14A}
+ * ]
+ */
+exports.getDbAndUserTimesInInterval = function(dbTime) {
+  var dashIndex = dbTime.indexOf('-');
+  var colonIndex = dbTime.indexOf(':');
+
+  var prefix = dbTime.substring(0, dashIndex);
+  var hour = dbTime.substring(dashIndex + 1, colonIndex);
+  // Everything at the end.
+  var period = dbTime.substring(colonIndex + 3);
+
+  // Keeping these as arrays is kind of lazy, but it is foolproof until we
+  // change the intervals.
+  var minutes = [
+    '00',
+    '01',
+    '02',
+    '03',
+    '04',
+    '05',
+    '06',
+    '07',
+    '08',
+    '09',
+    '10',
+    '11',
+    '12',
+    '13',
+    '14'
+  ];
+
+  var result = [];
+
+  minutes.forEach(function(val) {
+    var newUserTime = hour + ':' + val + period;
+    var newPrefix = prefix + '.' + val;
+    var newDbTime = newPrefix + '-' + newUserTime;
+
+    var timePoint = {};
+    timePoint.dbTime = newDbTime;
+    timePoint.userTime = newUserTime;
+    result.push(timePoint);
+  });
+
   return result;
 };
 
@@ -10621,6 +10646,8 @@
 var util = require('./jgiUtil');
 var logging = require('./jgiLogging');
 
+var FLAG_PLACE_HOLDER_TIME = 'hh:mm';
+
 function assertIsChimp(chimp) {
   if (chimp.constructor.name !== 'Chimp') {
     throw new Error('parameter must be a chimp');
@@ -10638,28 +10665,20 @@
 
 
 /**
- * Append all minutes as options to the select element.
- */
-function appendMinsToSelect($select) {
-  var mins = util.getAllMinutes();
-  mins.forEach(function(minute) {
+ * Append all valid minutes for this time as options to the $select.
+ */
+function appendTimesToSelect($select) {
+  var currentTime = urls.getFollowTimeFromUrl();
+  var validTimes = util.getDbAndUserTimesInInterval(currentTime);
+  // The first value we want to be the place holder time.
+  var placeHolderTime = {};
+  placeHolderTime.dbTime = FLAG_PLACE_HOLDER_TIME;
+  placeHolderTime.userTime = FLAG_PLACE_HOLDER_TIME;
+  validTimes.unshift(placeHolderTime);
+  validTimes.forEach(function(time) {
     var option = $('<option></option>');
-    option.attr('value', minute);
-    option.text(minute);
-    $select.append(option);
-  });
-}
-
-
-/**
- * Append all hours as options to the select element.
- */
-function appendHoursToSelect($select) {
-  var hours = util.getAllHours();
-  hours.forEach(function(hour) {
-    var option = $('<option></option>');
-    option.attr('value', hour);
-    option.text(hour);
+    option.attr('value', time.dbTime);
+    option.text(time.userTime);
     $select.append(option);
   });
 }
@@ -10723,7 +10742,6 @@
   $('.container').addClass('nodisplay');
   $('.species-container').addClass('nodisplay');
   $('.food-container').removeClass('nodisplay');
-  exports.updateFoodAfterEdit();
 }
 
 
@@ -10734,7 +10752,6 @@
   $('.container').addClass('nodisplay');
   $('.food-container').addClass('nodisplay');
   $('.species-container').removeClass('nodisplay');
-  exports.updateSpeciesAfterEdit();
 }
 
 
@@ -10765,14 +10782,18 @@
 
   $('#food-summary').attr('__rowid', '');
   $('#species-summary').attr('__rowid', '');
+
+  $('.food-summary').removeAttr('__data');
+  $('.species-summary').removeAttr('__data');
 }
 
 
 function timeIsValid(time) {
   // hh:mm is the default input. Faking begins with and ends with here.
   return (
-      time.lastIndexOf('hh', 0) !== 0 &&
-      time.lastIndexOf('mm') !== time.length - 2
+    time &&
+    time !==
+    FLAG_PLACE_HOLDER_TIME && time !== ''
   );
 }
 
@@ -10784,8 +10805,10 @@
 function foodCanBePersisted(food) {
   return (
       timeIsValid(food.startTime) &&
-      food.foodName !== '0' &&
-      food.foodPartEaten !== '0'
+      food.foodName &&
+      food.foodName !== '' &&
+      food.foodPartEaten &&
+      food.foodPartEaten !== ''
   );
 }
 
@@ -10795,11 +10818,13 @@
  * and end time.
  */
 function speciesCanBePersisted(species) {
+  // TODO: handle new species numbers.
   return (
       timeIsValid(species.startTime) &&
-      species.speciesName !== '0' &&
+      species.speciesName &&
+      species.number &&
       util.isInt(species.number) &&
-      species.number > 0
+      species.number !== 0
   );
 }
 
@@ -10932,71 +10957,69 @@
 
 
 exports.editExistingFood = function(food) {
-  var timeParts = food.startTime.split(':');
-  var startHours = timeParts[0];
-  var startMins = timeParts[1];
-
-  var endHours;
-  var endMins;
-  if (food.endTime === util.flagEndTimeNotSet) {
-    endHours = 'hh';
-    endMins = 'mm';
-  } else {
-    var endParts = food.endTime.split(':');
-    endHours = endParts[0];
-    endMins = endParts[1];
+  var $sumStartTime = $('#food-summary-start-time');
+  var $sumEndTime = $('#food-summary-end-time');
+  var $sumName = $('#food-summary-food');
+  var $sumPart = $('#food-summary-part');
+  var $foodSummary = $('#food-summary');
+
+  var $editName = $('#foods');
+  var $editPart = $('#food-part');
+
+  var userStartTime = util.getUserTimeFromDbTime(food.startTime);
+  $sumStartTime.attr('__data', food.startTime);
+  $sumStartTime.text(userStartTime);
+
+  if (food.endTime !== util.flagEndTimeNotSet) {
+    var userEndTime = util.getUserTimeFromDbTime(food.endTime);
+    $sumEndTime.attr('__data', food.endTime);
+    $sumEndTime.text(userEndTime);
   }
 
-  var $startHours = $('#start-time-food-hours');
-  var $startMins = $('#start-time-food-mins');
-  var $endHours = $('#end-time-food-hours');
-  var $endMins = $('#end-time-food-mins');
-  var $food = $('#foods');
-  var $foodPart = $('#food-part');
-  var $foodSummary = $('#food-summary');
-
-  $startHours.val(startHours);
-  $startMins.val(startMins);
-  $endHours.val(endHours);
-  $endMins.val(endMins);
-  $food.val(food.foodName);
-  $foodPart.val(food.foodPartEaten);
+  $sumName.text(food.foodName);
+  $sumName.attr('__data',food.foodName);
+  $editName.val(food.foodName);
+
+  $sumPart.text(food.foodPartEaten);
+  $sumPart.attr('__data',food.foodPartEaten);
+  $editPart.val(food.foodPartEaten);
+
   $foodSummary.attr('__rowid', food.rowId);
 
+  exports.updateSaveFoodButton();
+
   showFood();
 };
 
 
 exports.editExistingSpecies = function(species) {
-  var timeParts = species.startTime.split(':');
-  var startHours = timeParts[0];
-  var startMins = timeParts[1];
-
-  var endHours;
-  var endMins;
-  if (species.endTime === util.flagEndTimeNotSet) {
-    endHours = 'hh';
-    endMins = 'mm';
-  } else {
-    var endParts = species.endTime.split(':');
-    endHours = endParts[0];
-    endMins = endParts[1];
+  var $sumStartTime = $('#species-summary-start-time');
+  var $sumEndTime = $('#species-summary-end-time');
+  var $sumName = $('#species-summary-name');
+  var $sumNumber = $('#species-summary-number');
+  var $speciesSummary = $('#species-summary');
+
+  var $editName = $('#species');
+  var $editPart = $('#species_number');
+
+  var userStartTime = util.getUserTimeFromDbTime(species.startTime);
+  $sumStartTime.attr('__data', species.startTime);
+  $sumStartTime.text(userStartTime);
+
+  if (species.endTime !== util.flagEndTimeNotSet) {
+    var userEndTime = util.getUserTimeFromDbTime(species.endTime);
+    $sumEndTime.attr('__data', species.endTime);
+    $sumEndTime.text(userEndTime);
   }
 
-  var $startHours = $('#start-time-species-hours');
-  var $startMins = $('#start-time-species-mins');
-  var $endHours = $('#end-time-species-hours');
-  var $endMins = $('#end-time-species-mins');
-  var $species = $('#species');
-  var $speciesNumber = $('#species_number');
-  var $speciesSummary = $('#species-summary');
-
-  $startHours.val(startHours);
-  $startMins.val(startMins);
-  $endHours.val(endHours);
-  $endMins.val(endMins);
-  $species.val(species.speciesName);
-  $speciesNumber.val(species.number);
+  $sumName.text(species.speciesName);
+  $sumName.attr('__data', species.speciesName);
+  $editName.val(species.speciesName);
+
+  $sumNumber.text(species.number);
+  $sumNumber.attr('__data', species.number);
+  $editPart.val(species.number);
+
   $speciesSummary.attr('__rowid', species.rowId);
 
   showSpecies();
@@ -11004,91 +11027,30 @@
 
 
 /**
- * Update the UI after an edit to a food has taken place.
- */
-exports.updateFoodAfterEdit = function() {
+ * Enable or disable the food save button as appropriate.
+ */
+exports.updateSaveFoodButton = function() {
   var $saveFood = $('#saving_food');
-  var $foodSummaryStart = $('#food-summary-start-time');
-  var $foodSummaryEnd = $('#food-summary-end-time');
-  var $foodSummaryFood = $('#food-summary-food');
-  var $foodSummaryPart = $('#food-summary-part');
 
   if (validFoodSelected()) {
     $saveFood.prop('disabled', false);
   } else {
     $saveFood.prop('disabled', true);
   }
-
-  var food = exports.getFoodFromUi();
-
-  if (timeIsValid(food.startTime)) {
-    $foodSummaryStart.text(food.startTime);
-  } else {
-    $foodSummaryStart.text('?');
-  }
-
-  if (timeIsValid(food.endTime)) {
-    $foodSummaryEnd.text(food.endTime);
-  } else {
-    $foodSummaryEnd.text('?');
-  }
-
-  if (food.foodName !== '0') {
-    $foodSummaryFood.text(food.foodName);
-  } else {
-    $foodSummaryFood.text('?');
-  }
-
-  if (food.foodPartEaten !== '0') {
-    $foodSummaryPart.text(food.foodPartEaten);
-  } else {
-    $foodSummaryPart.text('?');
-  }
 };
 
 
 /**
  * Update the UI after an edit to a species has taken place.
  */
-exports.updateSpeciesAfterEdit = function() {
+exports.updateSaveSpeciesButton = function() {
   var $saveSpecies = $('#saving_species');
-  var $speciesSummaryStart = $('#species-summary-start-time');
-  var $speciesSummaryEnd = $('#species-summary-end-time');
-  var $speciesSummaryName = $('#species-summary-name');
-  var $speciesSummaryNumber = $('#species-summary-number');
 
   if (validSpeciesSelected()) {
     $saveSpecies.prop('disabled', false);
   } else {
     $saveSpecies.prop('disabled', true);
   }
-
-  var species = exports.getSpeciesFromUi();
-
-  if (timeIsValid(species.startTime)) {
-    $speciesSummaryStart.text(species.startTime);
-  } else {
-    $speciesSummaryStart.text('?');
-  }
-
-  if (timeIsValid(species.endTime)) {
-    $speciesSummaryEnd.text(species.endTime);
-  } else {
-    $speciesSummaryEnd.text('?');
-  }
-
-  if (species.speciesName !== '0') {
-    $speciesSummaryName.text(species.speciesName);
-  } else {
-    $speciesSummaryName.text('?');
-  }
-
-  if (species.number !== '0') {
-    // 0 is the default, illegal, unselectable value
-    $speciesSummaryNumber.text(species.number);
-  } else {
-    $speciesSummaryNumber.text('?');
-  }
 };
 
 
@@ -11462,7 +11424,7 @@
 /**
  * update the icon for selected chimp
  */
-exports.updateIconForSelectedChimp = function(chimp, chimpid, timeid) {
+exports.updateIconForSelectedChimp = function(chimp, chimpid) {
   var imagePaths = {
     absent: './img/time_empty.png',
     continuing: './img/time_continues.png',
@@ -11746,7 +11708,68 @@
 
 
 exports.initializeFoodListeners = function(control) {
-  $('.food-edit').change(exports.updateFoodAfterEdit);
+
+  $('#start-time-food').change(function() {
+    var $foodSummaryStart = $('#food-summary-start-time');
+    var $foodEditStart = $('#start-time-food');
+    var foodEditStartDb = $foodEditStart.val();
+
+    if (timeIsValid(foodEditStartDb)) {
+      var userStartTime = util.getUserTimeFromDbTime(foodEditStartDb);
+      $foodSummaryStart.text(userStartTime);
+      $foodSummaryStart.attr('__data', foodEditStartDb);
+    } else {
+      $foodSummaryStart.text('?');
+      $foodSummaryStart.removeAttr('__data');
+    }
+    exports.updateSaveFoodButton();
+  });
+
+  $('#end-time-food').change(function() {
+    var $foodSummaryEnd = $('#food-summary-end-time');
+    var $foodEditEnd = $('#end-time-food');
+    var foodEditEndDb = $foodEditEnd.val();
+
+    if (timeIsValid(foodEditEndDb)) {
+      var userEndtime = util.getUserTimeFromDbTime(foodEditEndDb);
+      $foodSummaryEnd.text(userEndtime);
+      $foodSummaryEnd.attr('__data', foodEditEndDb);
+    } else {
+      $foodSummaryEnd.text('?');
+      $foodSummaryEnd.removeAttr('__data');
+    }
+    exports.updateSaveFoodButton();
+  });
+
+  $('#foods').change(function() {
+    var $foodSummaryFood = $('#food-summary-food');
+    var $foodEditName = $('#foods');
+    var foodEditName = $foodEditName.val();
+
+    if (foodEditName !== '0') {
+      $foodSummaryFood.text(foodEditName);
+      $foodSummaryFood.attr('__data', foodEditName);
+    } else {
+      $foodSummaryFood.text('?');
+      $foodSummaryFood.removeAttr('__data');
+    }
+    exports.updateSaveFoodButton();
+  });
+
+  $('#food-part').change(function() {
+    var $foodSummaryPart = $('#food-summary-part');
+    var $foodEditPart = $('#food-part');
+    var foodEditPart = $foodEditPart.val();
+
+    if (foodEditPart !== '0') {
+      $foodSummaryPart.text(foodEditPart);
+      $foodSummaryPart.attr('__data', foodEditPart);
+    } else {
+      $foodSummaryPart.text('?');
+      $foodSummaryPart.removeAttr('__data');
+    }
+    exports.updateSaveFoodButton();
+  });
 
   $('#saving_food').click(function() {
     console.log('save food');
@@ -11787,7 +11810,68 @@
 
 
 exports.initializeSpeciesListeners = function(control) {
-  $('.species-edit').change(exports.updateSpeciesAfterEdit);
+  $('#start-time-species').change(function() {
+    var $speciesSummaryStart = $('#species-summary-start-time');
+    var $speciesEditStart = $('#start-time-species');
+    var speciesEditStartDb = $speciesEditStart.val();
+
+    if (timeIsValid(speciesEditStartDb)) {
+      var userStartTime = util.getUserTimeFromDbTime(speciesEditStartDb);
+      $speciesSummaryStart.text(userStartTime);
+      $speciesSummaryStart.attr('__data', speciesEditStartDb);
+    } else {
+      $speciesSummaryStart.text('?');
+      $speciesSummaryStart.removeAttr('__data');
+    }
+    exports.updateSaveSpeciesButton();
+  });
+
+  $('#end-time-species').change(function() {
+    var $speciesSummaryEnd = $('#species-summary-end-time');
+    var $speciesEditEnd = $('#end-time-species');
+    var speciesEditEndDb = $speciesEditEnd.val();
+
+    if (timeIsValid(speciesEditEndDb)) {
+      var userTime = util.getUserTimeFromDbTime(speciesEditEndDb);
+      $speciesSummaryEnd.text(userTime);
+      $speciesSummaryEnd.attr('__data', speciesEditEndDb);
+    } else {
+      $speciesSummaryEnd.text('?');
+      $speciesSummaryEnd.removeAttr('__data');
+    }
+    exports.updateSaveSpeciesButton();
+  });
+
+  $('#species').change(function() {
+    var $speciesSummaryName = $('#species-summary-name');
+    var $speciesEditName = $('#species');
+    var speciesName = $speciesEditName.val();
+
+    if (speciesName !== '0') {
+      $speciesSummaryName.text(speciesName);
+      $speciesSummaryName.attr('__data', speciesName);
+    } else {
+      $speciesSummaryName.text('?');
+      $speciesSummaryName.removeAttr('__data');
+    }
+    exports.updateSaveSpeciesButton();
+  });
+
+  $('#species_number').change(function() {
+    var $speciesSummaryNumber = $('#species-summary-number');
+    var $speciesEditNumber = $('#species_number');
+    var speciesNumber = $speciesEditNumber.val();
+
+    if (speciesNumber !== '0') {
+      // 0 is the default, illegal, unselectable value
+      $speciesSummaryNumber.text(speciesNumber);
+      $speciesSummaryNumber.attr('__data', speciesNumber);
+    } else {
+      $speciesSummaryNumber.text('?');
+      $speciesSummaryNumber.removeAttr('__data');
+    }
+    exports.updateSaveSpeciesButton();
+  });
 
   $('#saving_species').click(function() {
     console.log('save species');
@@ -11871,35 +11955,26 @@
 
 
 exports.initializeFood = function(control) {
-  var $startHours = $('#start-time-food-hours');
-  var $startMins = $('#start-time-food-mins');
-  var $endHours = $('#end-time-food-hours');
-  var $endMins = $('#end-time-food-mins');
-
-  appendHoursToSelect($startHours);
-  appendHoursToSelect($endHours);
-  appendMinsToSelect($startMins);
-  appendMinsToSelect($endMins);
+  var $startTime = $('#start-time-food');
+  var $endTime = $('#end-time-food');
+
+  appendTimesToSelect($startTime);
+  appendTimesToSelect($endTime);
 
   // We'll start with the save button disabled. You have to select valid food
   // times to enable it.
   $('#saving_food').prop('disabled', true);
 
   exports.initializeFoodListeners(control);
-
 };
 
 
 exports.initializeSpecies = function(control) {
-  var $startHours = $('#start-time-species-hours');
-  var $startMins = $('#start-time-species-mins');
-  var $endHours = $('#end-time-species-hours');
-  var $endMins = $('#end-time-species-mins');
-
-  appendHoursToSelect($startHours);
-  appendHoursToSelect($endHours);
-  appendMinsToSelect($startMins);
-  appendMinsToSelect($endMins);
+  var $startTime = $('#start-time-species');
+  var $endTime = $('#end-time-species');
+
+  appendTimesToSelect($startTime);
+  appendTimesToSelect($endTime);
 
   // Start with the save button disabled.
   $('#saving_species').prop('disabled', true);
@@ -12241,21 +12316,14 @@
 
 
 /**
- * Return the active food from the UI. Does NOT have to be a valid food that
- * can be saved. For instance, at first it might return 'mm' as the start time
- * place holder.
+ * Return the active food from the summary UI. Does NOT have to be a valid food
+ * that can be saved.
  */
 exports.getFoodFromUi = function() {
-  var startHours = $('#start-time-food-hours').val();
-  var startMins = $('#start-time-food-mins').val();
-  var startTime = startHours + ':' + startMins;
-
-  var endHours = $('#end-time-food-hours').val();
-  var endMins = $('#end-time-food-mins').val();
-  var endTime = endHours + ':' + endMins;
-
-  var food = $('#foods').val();
-  var foodPart = $('#food-part').val();
+  var startTime = $('#food-summary-start-time').attr('__data');
+  var endTime = $('#food-summary-end-time').attr('__data');
+  var food = $('#food-summary-food').attr('__data');
+  var foodPart = $('#food-summary-part').attr('__data');
 
   var date = urls.getFollowDateFromUrl();
   var focalId = urls.getFocalChimpIdFromUrl();
@@ -12280,19 +12348,13 @@
 
 
 /**
- * Return the active species from the UI.
+ * Return the active species from the summary UI.
  */
 exports.getSpeciesFromUi = function() {
-  var startHours = $('#start-time-species-hours').val();
-  var startMins = $('#start-time-species-mins').val();
-  var startTime = startHours + ':' + startMins;
-
-  var endHours = $('#end-time-species-hours').val();
-  var endMins = $('#end-time-species-mins').val();
-  var endTime = endHours + ':' + endMins;
-
-  var species = $('#species').val();
-  var number = $('#species_number').val();
+  var startTime = $('#species-summary-start-time').attr('__data');
+  var endTime = $('#species-summary-end-time').attr('__data');
+  var species = $('#species-summary-name').attr('__data');
+  var number = $('#species-summary-number').attr('__data');
 
   var date = urls.getFollowDateFromUrl();
   var focalId = urls.getFocalChimpIdFromUrl();
diff --git a/app/assets/js/followIntervalListBundle.js b/app/assets/js/followIntervalListBundle.js
--- a/app/assets/js/followIntervalListBundle.js
+++ b/app/assets/js/followIntervalListBundle.js
@@ -1109,16 +1109,71 @@
 },{}],6:[function(require,module,exports){
 'use strict';
 
-
-/**
- * Convert hours an mins integers to a zero-padded string. 1,5, would become:
- * '01:05'.
- */
-function convertToTime(hours, mins) {
-  var hoursStr = exports.convertToStringWithTwoZeros(hours);
-  var minsStr = exports.convertToStringWithTwoZeros(mins);
-  return hoursStr + ':' + minsStr;
-}
+// This is the strange list of times that Ian wants to use. A and J for am/pm
+// but in the Swahili form. The strange looping of times is something to do
+// with how local time is kept.
+var times = [
+  '00-12:00A',
+  '01-12:15A',
+  '02-12:30A',
+  '03-12:45A',
+  '04-1:00A',
+  '05-1:15A',
+  '06-1:30A',
+  '07-1:45A',
+  '08-2:00A',
+  '09-2:15A',
+  '10-2:30A',
+  '11-2:45A',
+  '12-3:00A',
+  '13-3:15A',
+  '14-3:30A',
+  '15-3:45A',
+  '16-4:00A',
+  '17-4:15A',
+  '18-4:30A',
+  '19-4:45A',
+  '20-5:00A',
+  '21-5:15A',
+  '22-5:30A',
+  '23-5:45A',
+  '21-6:00J',
+  '22-6:15J',
+  '23-6:30J',
+  '24-6:45J',
+  '25-7:00J',
+  '26-7:15J',
+  '27-7:30J',
+  '28-7:45J',
+  '29-8:00J',
+  '30-8:15J',
+  '31-8:30J',
+  '32-8:45J',
+  '33-9:00J',
+  '34-9:15J',
+  '35-9:30J',
+  '36-9:45J',
+  '37-10:00J',
+  '38-10:15J',
+  '39-10:30J',
+  '40-10:45J',
+  '41-11:00J',
+  '42-11:15J',
+  '43-11:30J',
+  '44-11:45J',
+  '45-12:00J',
+  '46-12:15J',
+  '47-12:30J',
+  '48-12:45J',
+  '49-1:00J',
+  '50-1:15J',
+  '51-1:30J',
+  '52-1:45J',
+  '53-2:00J',
+  '54-2:15J',
+  '55-2:30J',
+  '56-2:45J'
+];
 
 
 function sortItemsWithDate(objects) {
@@ -1141,6 +1196,63 @@
 
 
 /**
+ * Return an array of all the times that will be stored in the database. These
+ * are not user-facing, but are intended to be stored in the database
+ * representing a particular time.
+ */
+exports.getAllTimesForDb = function() {
+  // return a defensive copy
+  return times.slice();
+};
+
+
+/**
+ * Convert a user time to its db representation.
+ */
+exports.getDbTimeFromUserTime = function(userTime) {
+  var userTimes = exports.getAllTimesForUser();
+
+  var index = userTimes.indexOf(userTime);
+  if (index < 0) {
+    throw 'cannot find user time: ' + userTime;
+  }
+
+  return exports.getAllTimesForDb()[index];
+};
+
+
+exports.getUserTimeFromDbTime = function(dbTime) {
+  var userTimes = exports.getAllTimesForUser();
+  var dbTimes = exports.getAllTimesForDb();
+
+  var index = dbTimes.indexOf(dbTime);
+  if (index < 0) {
+    throw 'Unrecognized db time: ' + dbTime;
+  }
+
+  return userTimes[index];
+};
+
+
+/**
+ * Return an array of all user-facing time labels. These are the user-facing
+ * strings corresponding to the database-facing strings returned by
+ * getAllTimesForDb.
+ */
+exports.getAllTimesForUser = function() {
+  var result = [];
+  times.forEach(function(val) {
+    // We expect something like 01-12:00J, so find the first - and take
+    // everything after that.
+    var dashIndex = val.indexOf('-');
+    var userTime = val.substring(dashIndex + 1);
+    result.push(userTime);
+  });
+  return result;
+};
+
+
+/**
  * Sort the array of Follow objects.
  */
 exports.sortFollows = function(follows) {
@@ -1152,52 +1264,78 @@
   sortItemsWithDate(intervals);
 };
 
+
+/**
+ * Return the next time point from the given database-facing time. Throws an
+ * error if canIncrementTime returns false.
+ */
 exports.incrementTime = function(time) {
-
-  var interval = 15;
-  var parts = time.split(':');
-  var hours = parseInt(parts[0]);
-  var mins = parseInt(parts[1]);
-  var maybeTooLarge = mins + interval;
-
-  if (maybeTooLarge > 59) {
-    // then we've overflowed our time system.
-    mins = maybeTooLarge % 60;
-    // Don't worry about overflowing hours. Not going to worry about
-    // late night chimp monitoring.
-    hours = hours + 1;
-  } else {
-    mins = maybeTooLarge;
+  if (!exports.canIncrementTime(time)) {
+    throw 'cannot increment time: ' + time;
   }
-
-  // Format these strings to be two digits.
-  var hoursStr = exports.convertToStringWithTwoZeros(hours);
-  var minsStr = exports.convertToStringWithTwoZeros(mins);
-  var result = hoursStr + ':' + minsStr;
+  var index = times.indexOf(time);
+  var result = times[index + 1];
   return result;
-
 };
 
 
 /**
- * Get an array of the times that fall within an interval. If you passed
- * '7:00', this would return an array of ['mm', '7:00', '7:01', ..., '7:14'].
+ * Take a database-facing time (e.g. 05-12:12J) and return an array of objects
+ * with a 'dbTime' and 'userTime' value, corresponding to time points in the
+ * interval specified by the dbTime parameter.
+ *
+ * The dbTime keys will have the prefix include '.00' to '.14' to accommodate
+ * direct string comparisons. For instance, the time '00-12:00A' would return
+ * an array like:
+ * [
+ *   {dbTime: 00.00-12:00A, userTime: 12:00A},
+ *   {dbTime: 00.01-12:01A, userTime: 12:01A},
+ *   ...
+ *   {dbTime: 00.14-12:14A, userTime: 12:14A}
+ * ]
  */
-exports.getTimesInInterval = function(time) {
-  var interval = 15;
-  var parts = time.split(':');
-  var hours = parseInt(parts[0]);
-  var mins = parseInt(parts[1]);
-
-  var result = ['mm'];
-  // Fow now, assume our start times begin at 0, 15, 30, 45. This will prevent
-  // us having to worry about overflowing.
-  for (var i = 0; i < mins + interval; i++) {
-    var newMins = mins + i;
-    var nextTime = convertToTime(hours, newMins);
-    result.push(nextTime);
-  }
-  
+exports.getDbAndUserTimesInInterval = function(dbTime) {
+  var dashIndex = dbTime.indexOf('-');
+  var colonIndex = dbTime.indexOf(':');
+
+  var prefix = dbTime.substring(0, dashIndex);
+  var hour = dbTime.substring(dashIndex + 1, colonIndex);
+  // Everything at the end.
+  var period = dbTime.substring(colonIndex + 2);
+
+  // Keeping these as arrays is kind of lazy, but it is foolproof until we
+  // change the intervals.
+  var minutes = [
+    '00',
+    '01',
+    '02',
+    '03',
+    '04',
+    '05',
+    '06',
+    '07',
+    '08',
+    '09',
+    '10',
+    '11',
+    '12',
+    '13',
+    '14'
+  ];
+
+  var result = [];
+
+  minutes.forEach(function(val) {
+    var newUserTime = hour + ':' + val + period;
+    var newPrefix = prefix + '.' + val;
+    var newDbTime = newPrefix + newUserTime;
+
+    var timePoint = {};
+    timePoint.dbTime = newDbTime;
+    timePoint.userTime = newUserTime;
+    result.push(timePoint);
+  });
+
   return result;
 };
 
@@ -1237,25 +1375,36 @@
 };
 
 
+exports.canIncrementTime = function(time) {
+  var index = times.indexOf(time);
+  if (index < 0 || index === times.length) {
+    return false;
+  } else {
+    return true;
+  }
+};
+
+
+exports.canDecrementTime = function(time) {
+  var index = times.indexOf(time);
+  if (index < 0 || index === 0) {
+    return false;
+  } else {
+    return true;
+  }
+};
+
+
+/**
+ * Return the previous time point for the given database-facing time. Throws an
+ * error if canDecrementTime returns False.
+ */
 exports.decrementTime = function(time) {
-  var interval = 15;
-  var parts = time.split(':');
-  var hours = parseInt(parts[0]);
-  var mins = parseInt(parts[1]);
-  var maybeTooSmall = mins - interval;
-
-  if (maybeTooSmall < 0) {
-    // negative time
-    mins = 60 + maybeTooSmall;
-    hours = (hours === 24) ? 0 : (hours - 1);
-  } else {
-    mins = maybeTooSmall;
+  if (!exports.canDecrementTime(time)) {
+    throw 'cannot decrement time: ' + time;
   }
-
-  var hoursStr = exports.convertToStringWithTwoZeros(hours);
-  var minsStr = exports.convertToStringWithTwoZeros(mins);
-  var result = hoursStr + ':' + minsStr;
-  return result;
+  var index = times.indexOf(time);
+  return times[index - 1];
 };
 
 
diff --git a/app/assets/js/followListBundle.js b/app/assets/js/followListBundle.js
--- a/app/assets/js/followListBundle.js
+++ b/app/assets/js/followListBundle.js
@@ -1109,16 +1109,71 @@
 },{}],6:[function(require,module,exports){
 'use strict';
 
-
-/**
- * Convert hours an mins integers to a zero-padded string. 1,5, would become:
- * '01:05'.
- */
-function convertToTime(hours, mins) {
-  var hoursStr = exports.convertToStringWithTwoZeros(hours);
-  var minsStr = exports.convertToStringWithTwoZeros(mins);
-  return hoursStr + ':' + minsStr;
-}
+// This is the strange list of times that Ian wants to use. A and J for am/pm
+// but in the Swahili form. The strange looping of times is something to do
+// with how local time is kept.
+var times = [
+  '00-12:00A',
+  '01-12:15A',
+  '02-12:30A',
+  '03-12:45A',
+  '04-1:00A',
+  '05-1:15A',
+  '06-1:30A',
+  '07-1:45A',
+  '08-2:00A',
+  '09-2:15A',
+  '10-2:30A',
+  '11-2:45A',
+  '12-3:00A',
+  '13-3:15A',
+  '14-3:30A',
+  '15-3:45A',
+  '16-4:00A',
+  '17-4:15A',
+  '18-4:30A',
+  '19-4:45A',
+  '20-5:00A',
+  '21-5:15A',
+  '22-5:30A',
+  '23-5:45A',
+  '21-6:00J',
+  '22-6:15J',
+  '23-6:30J',
+  '24-6:45J',
+  '25-7:00J',
+  '26-7:15J',
+  '27-7:30J',
+  '28-7:45J',
+  '29-8:00J',
+  '30-8:15J',
+  '31-8:30J',
+  '32-8:45J',
+  '33-9:00J',
+  '34-9:15J',
+  '35-9:30J',
+  '36-9:45J',
+  '37-10:00J',
+  '38-10:15J',
+  '39-10:30J',
+  '40-10:45J',
+  '41-11:00J',
+  '42-11:15J',
+  '43-11:30J',
+  '44-11:45J',
+  '45-12:00J',
+  '46-12:15J',
+  '47-12:30J',
+  '48-12:45J',
+  '49-1:00J',
+  '50-1:15J',
+  '51-1:30J',
+  '52-1:45J',
+  '53-2:00J',
+  '54-2:15J',
+  '55-2:30J',
+  '56-2:45J'
+];
 
 
 function sortItemsWithDate(objects) {
@@ -1141,6 +1196,63 @@
 
 
 /**
+ * Return an array of all the times that will be stored in the database. These
+ * are not user-facing, but are intended to be stored in the database
+ * representing a particular time.
+ */
+exports.getAllTimesForDb = function() {
+  // return a defensive copy
+  return times.slice();
+};
+
+
+/**
+ * Convert a user time to its db representation.
+ */
+exports.getDbTimeFromUserTime = function(userTime) {
+  var userTimes = exports.getAllTimesForUser();
+
+  var index = userTimes.indexOf(userTime);
+  if (index < 0) {
+    throw 'cannot find user time: ' + userTime;
+  }
+
+  return exports.getAllTimesForDb()[index];
+};
+
+
+exports.getUserTimeFromDbTime = function(dbTime) {
+  var userTimes = exports.getAllTimesForUser();
+  var dbTimes = exports.getAllTimesForDb();
+
+  var index = dbTimes.indexOf(dbTime);
+  if (index < 0) {
+    throw 'Unrecognized db time: ' + dbTime;
+  }
+
+  return userTimes[index];
+};
+
+
+/**
+ * Return an array of all user-facing time labels. These are the user-facing
+ * strings corresponding to the database-facing strings returned by
+ * getAllTimesForDb.
+ */
+exports.getAllTimesForUser = function() {
+  var result = [];
+  times.forEach(function(val) {
+    // We expect something like 01-12:00J, so find the first - and take
+    // everything after that.
+    var dashIndex = val.indexOf('-');
+    var userTime = val.substring(dashIndex + 1);
+    result.push(userTime);
+  });
+  return result;
+};
+
+
+/**
  * Sort the array of Follow objects.
  */
 exports.sortFollows = function(follows) {
@@ -1152,52 +1264,78 @@
   sortItemsWithDate(intervals);
 };
 
+
+/**
+ * Return the next time point from the given database-facing time. Throws an
+ * error if canIncrementTime returns false.
+ */
 exports.incrementTime = function(time) {
-
-  var interval = 15;
-  var parts = time.split(':');
-  var hours = parseInt(parts[0]);
-  var mins = parseInt(parts[1]);
-  var maybeTooLarge = mins + interval;
-
-  if (maybeTooLarge > 59) {
-    // then we've overflowed our time system.
-    mins = maybeTooLarge % 60;
-    // Don't worry about overflowing hours. Not going to worry about
-    // late night chimp monitoring.
-    hours = hours + 1;
-  } else {
-    mins = maybeTooLarge;
+  if (!exports.canIncrementTime(time)) {
+    throw 'cannot increment time: ' + time;
   }
-
-  // Format these strings to be two digits.
-  var hoursStr = exports.convertToStringWithTwoZeros(hours);
-  var minsStr = exports.convertToStringWithTwoZeros(mins);
-  var result = hoursStr + ':' + minsStr;
+  var index = times.indexOf(time);
+  var result = times[index + 1];
   return result;
-
 };
 
 
 /**
- * Get an array of the times that fall within an interval. If you passed
- * '7:00', this would return an array of ['mm', '7:00', '7:01', ..., '7:14'].
+ * Take a database-facing time (e.g. 05-12:12J) and return an array of objects
+ * with a 'dbTime' and 'userTime' value, corresponding to time points in the
+ * interval specified by the dbTime parameter.
+ *
+ * The dbTime keys will have the prefix include '.00' to '.14' to accommodate
+ * direct string comparisons. For instance, the time '00-12:00A' would return
+ * an array like:
+ * [
+ *   {dbTime: 00.00-12:00A, userTime: 12:00A},
+ *   {dbTime: 00.01-12:01A, userTime: 12:01A},
+ *   ...
+ *   {dbTime: 00.14-12:14A, userTime: 12:14A}
+ * ]
  */
-exports.getTimesInInterval = function(time) {
-  var interval = 15;
-  var parts = time.split(':');
-  var hours = parseInt(parts[0]);
-  var mins = parseInt(parts[1]);
-
-  var result = ['mm'];
-  // Fow now, assume our start times begin at 0, 15, 30, 45. This will prevent
-  // us having to worry about overflowing.
-  for (var i = 0; i < mins + interval; i++) {
-    var newMins = mins + i;
-    var nextTime = convertToTime(hours, newMins);
-    result.push(nextTime);
-  }
-  
+exports.getDbAndUserTimesInInterval = function(dbTime) {
+  var dashIndex = dbTime.indexOf('-');
+  var colonIndex = dbTime.indexOf(':');
+
+  var prefix = dbTime.substring(0, dashIndex);
+  var hour = dbTime.substring(dashIndex + 1, colonIndex);
+  // Everything at the end.
+  var period = dbTime.substring(colonIndex + 2);
+
+  // Keeping these as arrays is kind of lazy, but it is foolproof until we
+  // change the intervals.
+  var minutes = [
+    '00',
+    '01',
+    '02',
+    '03',
+    '04',
+    '05',
+    '06',
+    '07',
+    '08',
+    '09',
+    '10',
+    '11',
+    '12',
+    '13',
+    '14'
+  ];
+
+  var result = [];
+
+  minutes.forEach(function(val) {
+    var newUserTime = hour + ':' + val + period;
+    var newPrefix = prefix + '.' + val;
+    var newDbTime = newPrefix + newUserTime;
+
+    var timePoint = {};
+    timePoint.dbTime = newDbTime;
+    timePoint.userTime = newUserTime;
+    result.push(timePoint);
+  });
+
   return result;
 };
 
@@ -1237,25 +1375,36 @@
 };
 
 
+exports.canIncrementTime = function(time) {
+  var index = times.indexOf(time);
+  if (index < 0 || index === times.length) {
+    return false;
+  } else {
+    return true;
+  }
+};
+
+
+exports.canDecrementTime = function(time) {
+  var index = times.indexOf(time);
+  if (index < 0 || index === 0) {
+    return false;
+  } else {
+    return true;
+  }
+};
+
+
+/**
+ * Return the previous time point for the given database-facing time. Throws an
+ * error if canDecrementTime returns False.
+ */
 exports.decrementTime = function(time) {
-  var interval = 15;
-  var parts = time.split(':');
-  var hours = parseInt(parts[0]);
-  var mins = parseInt(parts[1]);
-  var maybeTooSmall = mins - interval;
-
-  if (maybeTooSmall < 0) {
-    // negative time
-    mins = 60 + maybeTooSmall;
-    hours = (hours === 24) ? 0 : (hours - 1);
-  } else {
-    mins = maybeTooSmall;
+  if (!exports.canDecrementTime(time)) {
+    throw 'cannot decrement time: ' + time;
   }
-
-  var hoursStr = exports.convertToStringWithTwoZeros(hours);
-  var minsStr = exports.convertToStringWithTwoZeros(mins);
-  var result = hoursStr + ':' + minsStr;
-  return result;
+  var index = times.indexOf(time);
+  return times[index - 1];
 };
 
 
diff --git a/app/assets/js/homeScreenBundle.js b/app/assets/js/homeScreenBundle.js
--- a/app/assets/js/homeScreenBundle.js
+++ b/app/assets/js/homeScreenBundle.js
@@ -1109,16 +1109,71 @@
 },{}],6:[function(require,module,exports){
 'use strict';
 
-
-/**
- * Convert hours an mins integers to a zero-padded string. 1,5, would become:
- * '01:05'.
- */
-function convertToTime(hours, mins) {
-  var hoursStr = exports.convertToStringWithTwoZeros(hours);
-  var minsStr = exports.convertToStringWithTwoZeros(mins);
-  return hoursStr + ':' + minsStr;
-}
+// This is the strange list of times that Ian wants to use. A and J for am/pm
+// but in the Swahili form. The strange looping of times is something to do
+// with how local time is kept.
+var times = [
+  '00-12:00A',
+  '01-12:15A',
+  '02-12:30A',
+  '03-12:45A',
+  '04-1:00A',
+  '05-1:15A',
+  '06-1:30A',
+  '07-1:45A',
+  '08-2:00A',
+  '09-2:15A',
+  '10-2:30A',
+  '11-2:45A',
+  '12-3:00A',
+  '13-3:15A',
+  '14-3:30A',
+  '15-3:45A',
+  '16-4:00A',
+  '17-4:15A',
+  '18-4:30A',
+  '19-4:45A',
+  '20-5:00A',
+  '21-5:15A',
+  '22-5:30A',
+  '23-5:45A',
+  '21-6:00J',
+  '22-6:15J',
+  '23-6:30J',
+  '24-6:45J',
+  '25-7:00J',
+  '26-7:15J',
+  '27-7:30J',
+  '28-7:45J',
+  '29-8:00J',
+  '30-8:15J',
+  '31-8:30J',
+  '32-8:45J',
+  '33-9:00J',
+  '34-9:15J',
+  '35-9:30J',
+  '36-9:45J',
+  '37-10:00J',
+  '38-10:15J',
+  '39-10:30J',
+  '40-10:45J',
+  '41-11:00J',
+  '42-11:15J',
+  '43-11:30J',
+  '44-11:45J',
+  '45-12:00J',
+  '46-12:15J',
+  '47-12:30J',
+  '48-12:45J',
+  '49-1:00J',
+  '50-1:15J',
+  '51-1:30J',
+  '52-1:45J',
+  '53-2:00J',
+  '54-2:15J',
+  '55-2:30J',
+  '56-2:45J'
+];
 
 
 function sortItemsWithDate(objects) {
@@ -1141,6 +1196,63 @@
 
 
 /**
+ * Return an array of all the times that will be stored in the database. These
+ * are not user-facing, but are intended to be stored in the database
+ * representing a particular time.
+ */
+exports.getAllTimesForDb = function() {
+  // return a defensive copy
+  return times.slice();
+};
+
+
+/**
+ * Convert a user time to its db representation.
+ */
+exports.getDbTimeFromUserTime = function(userTime) {
+  var userTimes = exports.getAllTimesForUser();
+
+  var index = userTimes.indexOf(userTime);
+  if (index < 0) {
+    throw 'cannot find user time: ' + userTime;
+  }
+
+  return exports.getAllTimesForDb()[index];
+};
+
+
+exports.getUserTimeFromDbTime = function(dbTime) {
+  var userTimes = exports.getAllTimesForUser();
+  var dbTimes = exports.getAllTimesForDb();
+
+  var index = dbTimes.indexOf(dbTime);
+  if (index < 0) {
+    throw 'Unrecognized db time: ' + dbTime;
+  }
+
+  return userTimes[index];
+};
+
+
+/**
+ * Return an array of all user-facing time labels. These are the user-facing
+ * strings corresponding to the database-facing strings returned by
+ * getAllTimesForDb.
+ */
+exports.getAllTimesForUser = function() {
+  var result = [];
+  times.forEach(function(val) {
+    // We expect something like 01-12:00J, so find the first - and take
+    // everything after that.
+    var dashIndex = val.indexOf('-');
+    var userTime = val.substring(dashIndex + 1);
+    result.push(userTime);
+  });
+  return result;
+};
+
+
+/**
  * Sort the array of Follow objects.
  */
 exports.sortFollows = function(follows) {
@@ -1152,52 +1264,78 @@
   sortItemsWithDate(intervals);
 };
 
+
+/**
+ * Return the next time point from the given database-facing time. Throws an
+ * error if canIncrementTime returns false.
+ */
 exports.incrementTime = function(time) {
-
-  var interval = 15;
-  var parts = time.split(':');
-  var hours = parseInt(parts[0]);
-  var mins = parseInt(parts[1]);
-  var maybeTooLarge = mins + interval;
-
-  if (maybeTooLarge > 59) {
-    // then we've overflowed our time system.
-    mins = maybeTooLarge % 60;
-    // Don't worry about overflowing hours. Not going to worry about
-    // late night chimp monitoring.
-    hours = hours + 1;
-  } else {
-    mins = maybeTooLarge;
+  if (!exports.canIncrementTime(time)) {
+    throw 'cannot increment time: ' + time;
   }
-
-  // Format these strings to be two digits.
-  var hoursStr = exports.convertToStringWithTwoZeros(hours);
-  var minsStr = exports.convertToStringWithTwoZeros(mins);
-  var result = hoursStr + ':' + minsStr;
+  var index = times.indexOf(time);
+  var result = times[index + 1];
   return result;
-
 };
 
 
 /**
- * Get an array of the times that fall within an interval. If you passed
- * '7:00', this would return an array of ['mm', '7:00', '7:01', ..., '7:14'].
+ * Take a database-facing time (e.g. 05-12:12J) and return an array of objects
+ * with a 'dbTime' and 'userTime' value, corresponding to time points in the
+ * interval specified by the dbTime parameter.
+ *
+ * The dbTime keys will have the prefix include '.00' to '.14' to accommodate
+ * direct string comparisons. For instance, the time '00-12:00A' would return
+ * an array like:
+ * [
+ *   {dbTime: 00.00-12:00A, userTime: 12:00A},
+ *   {dbTime: 00.01-12:01A, userTime: 12:01A},
+ *   ...
+ *   {dbTime: 00.14-12:14A, userTime: 12:14A}
+ * ]
  */
-exports.getTimesInInterval = function(time) {
-  var interval = 15;
-  var parts = time.split(':');
-  var hours = parseInt(parts[0]);
-  var mins = parseInt(parts[1]);
-
-  var result = ['mm'];
-  // Fow now, assume our start times begin at 0, 15, 30, 45. This will prevent
-  // us having to worry about overflowing.
-  for (var i = 0; i < mins + interval; i++) {
-    var newMins = mins + i;
-    var nextTime = convertToTime(hours, newMins);
-    result.push(nextTime);
-  }
-  
+exports.getDbAndUserTimesInInterval = function(dbTime) {
+  var dashIndex = dbTime.indexOf('-');
+  var colonIndex = dbTime.indexOf(':');
+
+  var prefix = dbTime.substring(0, dashIndex);
+  var hour = dbTime.substring(dashIndex + 1, colonIndex);
+  // Everything at the end.
+  var period = dbTime.substring(colonIndex + 2);
+
+  // Keeping these as arrays is kind of lazy, but it is foolproof until we
+  // change the intervals.
+  var minutes = [
+    '00',
+    '01',
+    '02',
+    '03',
+    '04',
+    '05',
+    '06',
+    '07',
+    '08',
+    '09',
+    '10',
+    '11',
+    '12',
+    '13',
+    '14'
+  ];
+
+  var result = [];
+
+  minutes.forEach(function(val) {
+    var newUserTime = hour + ':' + val + period;
+    var newPrefix = prefix + '.' + val;
+    var newDbTime = newPrefix + newUserTime;
+
+    var timePoint = {};
+    timePoint.dbTime = newDbTime;
+    timePoint.userTime = newUserTime;
+    result.push(timePoint);
+  });
+
   return result;
 };
 
@@ -1237,25 +1375,36 @@
 };
 
 
+exports.canIncrementTime = function(time) {
+  var index = times.indexOf(time);
+  if (index < 0 || index === times.length) {
+    return false;
+  } else {
+    return true;
+  }
+};
+
+
+exports.canDecrementTime = function(time) {
+  var index = times.indexOf(time);
+  if (index < 0 || index === 0) {
+    return false;
+  } else {
+    return true;
+  }
+};
+
+
+/**
+ * Return the previous time point for the given database-facing time. Throws an
+ * error if canDecrementTime returns False.
+ */
 exports.decrementTime = function(time) {
-  var interval = 15;
-  var parts = time.split(':');
-  var hours = parseInt(parts[0]);
-  var mins = parseInt(parts[1]);
-  var maybeTooSmall = mins - interval;
-
-  if (maybeTooSmall < 0) {
-    // negative time
-    mins = 60 + maybeTooSmall;
-    hours = (hours === 24) ? 0 : (hours - 1);
-  } else {
-    mins = maybeTooSmall;
+  if (!exports.canDecrementTime(time)) {
+    throw 'cannot decrement time: ' + time;
   }
-
-  var hoursStr = exports.convertToStringWithTwoZeros(hours);
-  var minsStr = exports.convertToStringWithTwoZeros(mins);
-  var result = hoursStr + ':' + minsStr;
-  return result;
+  var index = times.indexOf(time);
+  return times[index - 1];
 };
 
 
diff --git a/app/assets/js/jgiFollow.js b/app/assets/js/jgiFollow.js
--- a/app/assets/js/jgiFollow.js
+++ b/app/assets/js/jgiFollow.js
@@ -12,6 +12,8 @@
 var util = require('./jgiUtil');
 var logging = require('./jgiLogging');
 
+var FLAG_PLACE_HOLDER_TIME = 'hh:mm';
+
 function assertIsChimp(chimp) {
   if (chimp.constructor.name !== 'Chimp') {
     throw new Error('parameter must be a chimp');
@@ -29,28 +31,20 @@
 
 
 /**
- * Append all minutes as options to the select element.
+ * Append all valid minutes for this time as options to the $select.
  */
-function appendMinsToSelect($select) {
-  var mins = util.getAllMinutes();
-  mins.forEach(function(minute) {
+function appendTimesToSelect($select) {
+  var currentTime = urls.getFollowTimeFromUrl();
+  var validTimes = util.getDbAndUserTimesInInterval(currentTime);
+  // The first value we want to be the place holder time.
+  var placeHolderTime = {};
+  placeHolderTime.dbTime = FLAG_PLACE_HOLDER_TIME;
+  placeHolderTime.userTime = FLAG_PLACE_HOLDER_TIME;
+  validTimes.unshift(placeHolderTime);
+  validTimes.forEach(function(time) {
     var option = $('<option></option>');
-    option.attr('value', minute);
-    option.text(minute);
-    $select.append(option);
-  });
-}
-
-
-/**
- * Append all hours as options to the select element.
- */
-function appendHoursToSelect($select) {
-  var hours = util.getAllHours();
-  hours.forEach(function(hour) {
-    var option = $('<option></option>');
-    option.attr('value', hour);
-    option.text(hour);
+    option.attr('value', time.dbTime);
+    option.text(time.userTime);
     $select.append(option);
   });
 }
@@ -114,7 +108,6 @@
   $('.container').addClass('nodisplay');
   $('.species-container').addClass('nodisplay');
   $('.food-container').removeClass('nodisplay');
-  exports.updateFoodAfterEdit();
 }
 
 
@@ -125,7 +118,6 @@
   $('.container').addClass('nodisplay');
   $('.food-container').addClass('nodisplay');
   $('.species-container').removeClass('nodisplay');
-  exports.updateSpeciesAfterEdit();
 }
 
 
@@ -156,14 +148,18 @@
 
   $('#food-summary').attr('__rowid', '');
   $('#species-summary').attr('__rowid', '');
+
+  $('.food-summary').removeAttr('__data');
+  $('.species-summary').removeAttr('__data');
 }
 
 
 function timeIsValid(time) {
   // hh:mm is the default input. Faking begins with and ends with here.
   return (
-      time.lastIndexOf('hh', 0) !== 0 &&
-      time.lastIndexOf('mm') !== time.length - 2
+    time &&
+    time !==
+    FLAG_PLACE_HOLDER_TIME && time !== ''
   );
 }
 
@@ -175,8 +171,10 @@
 function foodCanBePersisted(food) {
   return (
       timeIsValid(food.startTime) &&
-      food.foodName !== '0' &&
-      food.foodPartEaten !== '0'
+      food.foodName &&
+      food.foodName !== '' &&
+      food.foodPartEaten &&
+      food.foodPartEaten !== ''
   );
 }
 
@@ -186,11 +184,13 @@
  * and end time.
  */
 function speciesCanBePersisted(species) {
+  // TODO: handle new species numbers.
   return (
       timeIsValid(species.startTime) &&
-      species.speciesName !== '0' &&
+      species.speciesName &&
+      species.number &&
       util.isInt(species.number) &&
-      species.number > 0
+      species.number !== 0
   );
 }
 
@@ -323,71 +323,69 @@
 
 
 exports.editExistingFood = function(food) {
-  var timeParts = food.startTime.split(':');
-  var startHours = timeParts[0];
-  var startMins = timeParts[1];
+  var $sumStartTime = $('#food-summary-start-time');
+  var $sumEndTime = $('#food-summary-end-time');
+  var $sumName = $('#food-summary-food');
+  var $sumPart = $('#food-summary-part');
+  var $foodSummary = $('#food-summary');
 
-  var endHours;
-  var endMins;
-  if (food.endTime === util.flagEndTimeNotSet) {
-    endHours = 'hh';
-    endMins = 'mm';
-  } else {
-    var endParts = food.endTime.split(':');
-    endHours = endParts[0];
-    endMins = endParts[1];
+  var $editName = $('#foods');
+  var $editPart = $('#food-part');
+
+  var userStartTime = util.getUserTimeFromDbTime(food.startTime);
+  $sumStartTime.attr('__data', food.startTime);
+  $sumStartTime.text(userStartTime);
+
+  if (food.endTime !== util.flagEndTimeNotSet) {
+    var userEndTime = util.getUserTimeFromDbTime(food.endTime);
+    $sumEndTime.attr('__data', food.endTime);
+    $sumEndTime.text(userEndTime);
   }
 
-  var $startHours = $('#start-time-food-hours');
-  var $startMins = $('#start-time-food-mins');
-  var $endHours = $('#end-time-food-hours');
-  var $endMins = $('#end-time-food-mins');
-  var $food = $('#foods');
-  var $foodPart = $('#food-part');
-  var $foodSummary = $('#food-summary');
+  $sumName.text(food.foodName);
+  $sumName.attr('__data',food.foodName);
+  $editName.val(food.foodName);
 
-  $startHours.val(startHours);
-  $startMins.val(startMins);
-  $endHours.val(endHours);
-  $endMins.val(endMins);
-  $food.val(food.foodName);
-  $foodPart.val(food.foodPartEaten);
+  $sumPart.text(food.foodPartEaten);
+  $sumPart.attr('__data',food.foodPartEaten);
+  $editPart.val(food.foodPartEaten);
+
   $foodSummary.attr('__rowid', food.rowId);
 
+  exports.updateSaveFoodButton();
+
   showFood();
 };
 
 
 exports.editExistingSpecies = function(species) {
-  var timeParts = species.startTime.split(':');
-  var startHours = timeParts[0];
-  var startMins = timeParts[1];
+  var $sumStartTime = $('#species-summary-start-time');
+  var $sumEndTime = $('#species-summary-end-time');
+  var $sumName = $('#species-summary-name');
+  var $sumNumber = $('#species-summary-number');
+  var $speciesSummary = $('#species-summary');
 
-  var endHours;
-  var endMins;
-  if (species.endTime === util.flagEndTimeNotSet) {
-    endHours = 'hh';
-    endMins = 'mm';
-  } else {
-    var endParts = species.endTime.split(':');
-    endHours = endParts[0];
-    endMins = endParts[1];
+  var $editName = $('#species');
+  var $editPart = $('#species_number');
+
+  var userStartTime = util.getUserTimeFromDbTime(species.startTime);
+  $sumStartTime.attr('__data', species.startTime);
+  $sumStartTime.text(userStartTime);
+
+  if (species.endTime !== util.flagEndTimeNotSet) {
+    var userEndTime = util.getUserTimeFromDbTime(species.endTime);
+    $sumEndTime.attr('__data', species.endTime);
+    $sumEndTime.text(userEndTime);
   }
 
-  var $startHours = $('#start-time-species-hours');
-  var $startMins = $('#start-time-species-mins');
-  var $endHours = $('#end-time-species-hours');
-  var $endMins = $('#end-time-species-mins');
-  var $species = $('#species');
-  var $speciesNumber = $('#species_number');
-  var $speciesSummary = $('#species-summary');
+  $sumName.text(species.speciesName);
+  $sumName.attr('__data', species.speciesName);
+  $editName.val(species.speciesName);
 
-  $startHours.val(startHours);
-  $startMins.val(startMins);
-  $endHours.val(endHours);
-  $endMins.val(endMins);
-  $species.val(species.speciesName);
-  $speciesNumber.val(species.number);
+  $sumNumber.text(species.number);
+  $sumNumber.attr('__data', species.number);
+  $editPart.val(species.number);
+
   $speciesSummary.attr('__rowid', species.rowId);
 
   showSpecies();
@@ -395,91 +393,30 @@
 
 
 /**
- * Update the UI after an edit to a food has taken place.
+ * Enable or disable the food save button as appropriate.
  */
-exports.updateFoodAfterEdit = function() {
+exports.updateSaveFoodButton = function() {
   var $saveFood = $('#saving_food');
-  var $foodSummaryStart = $('#food-summary-start-time');
-  var $foodSummaryEnd = $('#food-summary-end-time');
-  var $foodSummaryFood = $('#food-summary-food');
-  var $foodSummaryPart = $('#food-summary-part');
 
   if (validFoodSelected()) {
     $saveFood.prop('disabled', false);
   } else {
     $saveFood.prop('disabled', true);
   }
-
-  var food = exports.getFoodFromUi();
-
-  if (timeIsValid(food.startTime)) {
-    $foodSummaryStart.text(food.startTime);
-  } else {
-    $foodSummaryStart.text('?');
-  }
-
-  if (timeIsValid(food.endTime)) {
-    $foodSummaryEnd.text(food.endTime);
-  } else {
-    $foodSummaryEnd.text('?');
-  }
-
-  if (food.foodName !== '0') {
-    $foodSummaryFood.text(food.foodName);
-  } else {
-    $foodSummaryFood.text('?');
-  }
-
-  if (food.foodPartEaten !== '0') {
-    $foodSummaryPart.text(food.foodPartEaten);
-  } else {
-    $foodSummaryPart.text('?');
-  }
 };
 
 
 /**
  * Update the UI after an edit to a species has taken place.
  */
-exports.updateSpeciesAfterEdit = function() {
+exports.updateSaveSpeciesButton = function() {
   var $saveSpecies = $('#saving_species');
-  var $speciesSummaryStart = $('#species-summary-start-time');
-  var $speciesSummaryEnd = $('#species-summary-end-time');
-  var $speciesSummaryName = $('#species-summary-name');
-  var $speciesSummaryNumber = $('#species-summary-number');
 
   if (validSpeciesSelected()) {
     $saveSpecies.prop('disabled', false);
   } else {
     $saveSpecies.prop('disabled', true);
   }
-
-  var species = exports.getSpeciesFromUi();
-
-  if (timeIsValid(species.startTime)) {
-    $speciesSummaryStart.text(species.startTime);
-  } else {
-    $speciesSummaryStart.text('?');
-  }
-
-  if (timeIsValid(species.endTime)) {
-    $speciesSummaryEnd.text(species.endTime);
-  } else {
-    $speciesSummaryEnd.text('?');
-  }
-
-  if (species.speciesName !== '0') {
-    $speciesSummaryName.text(species.speciesName);
-  } else {
-    $speciesSummaryName.text('?');
-  }
-
-  if (species.number !== '0') {
-    // 0 is the default, illegal, unselectable value
-    $speciesSummaryNumber.text(species.number);
-  } else {
-    $speciesSummaryNumber.text('?');
-  }
 };
 
 
@@ -853,7 +790,7 @@
 /**
  * update the icon for selected chimp
  */
-exports.updateIconForSelectedChimp = function(chimp, chimpid, timeid) {
+exports.updateIconForSelectedChimp = function(chimp, chimpid) {
   var imagePaths = {
     absent: './img/time_empty.png',
     continuing: './img/time_continues.png',
@@ -1137,7 +1074,68 @@
 
 
 exports.initializeFoodListeners = function(control) {
-  $('.food-edit').change(exports.updateFoodAfterEdit);
+
+  $('#start-time-food').change(function() {
+    var $foodSummaryStart = $('#food-summary-start-time');
+    var $foodEditStart = $('#start-time-food');
+    var foodEditStartDb = $foodEditStart.val();
+
+    if (timeIsValid(foodEditStartDb)) {
+      var userStartTime = util.getUserTimeFromDbTime(foodEditStartDb);
+      $foodSummaryStart.text(userStartTime);
+      $foodSummaryStart.attr('__data', foodEditStartDb);
+    } else {
+      $foodSummaryStart.text('?');
+      $foodSummaryStart.removeAttr('__data');
+    }
+    exports.updateSaveFoodButton();
+  });
+
+  $('#end-time-food').change(function() {
+    var $foodSummaryEnd = $('#food-summary-end-time');
+    var $foodEditEnd = $('#end-time-food');
+    var foodEditEndDb = $foodEditEnd.val();
+
+    if (timeIsValid(foodEditEndDb)) {
+      var userEndtime = util.getUserTimeFromDbTime(foodEditEndDb);
+      $foodSummaryEnd.text(userEndtime);
+      $foodSummaryEnd.attr('__data', foodEditEndDb);
+    } else {
+      $foodSummaryEnd.text('?');
+      $foodSummaryEnd.removeAttr('__data');
+    }
+    exports.updateSaveFoodButton();
+  });
+
+  $('#foods').change(function() {
+    var $foodSummaryFood = $('#food-summary-food');
+    var $foodEditName = $('#foods');
+    var foodEditName = $foodEditName.val();
+
+    if (foodEditName !== '0') {
+      $foodSummaryFood.text(foodEditName);
+      $foodSummaryFood.attr('__data', foodEditName);
+    } else {
+      $foodSummaryFood.text('?');
+      $foodSummaryFood.removeAttr('__data');
+    }
+    exports.updateSaveFoodButton();
+  });
+
+  $('#food-part').change(function() {
+    var $foodSummaryPart = $('#food-summary-part');
+    var $foodEditPart = $('#food-part');
+    var foodEditPart = $foodEditPart.val();
+
+    if (foodEditPart !== '0') {
+      $foodSummaryPart.text(foodEditPart);
+      $foodSummaryPart.attr('__data', foodEditPart);
+    } else {
+      $foodSummaryPart.text('?');
+      $foodSummaryPart.removeAttr('__data');
+    }
+    exports.updateSaveFoodButton();
+  });
 
   $('#saving_food').click(function() {
     console.log('save food');
@@ -1178,7 +1176,68 @@
 
 
 exports.initializeSpeciesListeners = function(control) {
-  $('.species-edit').change(exports.updateSpeciesAfterEdit);
+  $('#start-time-species').change(function() {
+    var $speciesSummaryStart = $('#species-summary-start-time');
+    var $speciesEditStart = $('#start-time-species');
+    var speciesEditStartDb = $speciesEditStart.val();
+
+    if (timeIsValid(speciesEditStartDb)) {
+      var userStartTime = util.getUserTimeFromDbTime(speciesEditStartDb);
+      $speciesSummaryStart.text(userStartTime);
+      $speciesSummaryStart.attr('__data', speciesEditStartDb);
+    } else {
+      $speciesSummaryStart.text('?');
+      $speciesSummaryStart.removeAttr('__data');
+    }
+    exports.updateSaveSpeciesButton();
+  });
+
+  $('#end-time-species').change(function() {
+    var $speciesSummaryEnd = $('#species-summary-end-time');
+    var $speciesEditEnd = $('#end-time-species');
+    var speciesEditEndDb = $speciesEditEnd.val();
+
+    if (timeIsValid(speciesEditEndDb)) {
+      var userTime = util.getUserTimeFromDbTime(speciesEditEndDb);
+      $speciesSummaryEnd.text(userTime);
+      $speciesSummaryEnd.attr('__data', speciesEditEndDb);
+    } else {
+      $speciesSummaryEnd.text('?');
+      $speciesSummaryEnd.removeAttr('__data');
+    }
+    exports.updateSaveSpeciesButton();
+  });
+
+  $('#species').change(function() {
+    var $speciesSummaryName = $('#species-summary-name');
+    var $speciesEditName = $('#species');
+    var speciesName = $speciesEditName.val();
+
+    if (speciesName !== '0') {
+      $speciesSummaryName.text(speciesName);
+      $speciesSummaryName.attr('__data', speciesName);
+    } else {
+      $speciesSummaryName.text('?');
+      $speciesSummaryName.removeAttr('__data');
+    }
+    exports.updateSaveSpeciesButton();
+  });
+
+  $('#species_number').change(function() {
+    var $speciesSummaryNumber = $('#species-summary-number');
+    var $speciesEditNumber = $('#species_number');
+    var speciesNumber = $speciesEditNumber.val();
+
+    if (speciesNumber !== '0') {
+      // 0 is the default, illegal, unselectable value
+      $speciesSummaryNumber.text(speciesNumber);
+      $speciesSummaryNumber.attr('__data', speciesNumber);
+    } else {
+      $speciesSummaryNumber.text('?');
+      $speciesSummaryNumber.removeAttr('__data');
+    }
+    exports.updateSaveSpeciesButton();
+  });
 
   $('#saving_species').click(function() {
     console.log('save species');
@@ -1262,35 +1321,26 @@
 
 
 exports.initializeFood = function(control) {
-  var $startHours = $('#start-time-food-hours');
-  var $startMins = $('#start-time-food-mins');
-  var $endHours = $('#end-time-food-hours');
-  var $endMins = $('#end-time-food-mins');
+  var $startTime = $('#start-time-food');
+  var $endTime = $('#end-time-food');
 
-  appendHoursToSelect($startHours);
-  appendHoursToSelect($endHours);
-  appendMinsToSelect($startMins);
-  appendMinsToSelect($endMins);
+  appendTimesToSelect($startTime);
+  appendTimesToSelect($endTime);
 
   // We'll start with the save button disabled. You have to select valid food
   // times to enable it.
   $('#saving_food').prop('disabled', true);
 
   exports.initializeFoodListeners(control);
-
 };
 
 
 exports.initializeSpecies = function(control) {
-  var $startHours = $('#start-time-species-hours');
-  var $startMins = $('#start-time-species-mins');
-  var $endHours = $('#end-time-species-hours');
-  var $endMins = $('#end-time-species-mins');
+  var $startTime = $('#start-time-species');
+  var $endTime = $('#end-time-species');
 
-  appendHoursToSelect($startHours);
-  appendHoursToSelect($endHours);
-  appendMinsToSelect($startMins);
-  appendMinsToSelect($endMins);
+  appendTimesToSelect($startTime);
+  appendTimesToSelect($endTime);
 
   // Start with the save button disabled.
   $('#saving_species').prop('disabled', true);
@@ -1632,21 +1682,14 @@
 
 
 /**
- * Return the active food from the UI. Does NOT have to be a valid food that
- * can be saved. For instance, at first it might return 'mm' as the start time
- * place holder.
+ * Return the active food from the summary UI. Does NOT have to be a valid food
+ * that can be saved.
  */
 exports.getFoodFromUi = function() {
-  var startHours = $('#start-time-food-hours').val();
-  var startMins = $('#start-time-food-mins').val();
-  var startTime = startHours + ':' + startMins;
-
-  var endHours = $('#end-time-food-hours').val();
-  var endMins = $('#end-time-food-mins').val();
-  var endTime = endHours + ':' + endMins;
-
-  var food = $('#foods').val();
-  var foodPart = $('#food-part').val();
+  var startTime = $('#food-summary-start-time').attr('__data');
+  var endTime = $('#food-summary-end-time').attr('__data');
+  var food = $('#food-summary-food').attr('__data');
+  var foodPart = $('#food-summary-part').attr('__data');
 
   var date = urls.getFollowDateFromUrl();
   var focalId = urls.getFocalChimpIdFromUrl();
@@ -1671,19 +1714,13 @@
 
 
 /**
- * Return the active species from the UI.
+ * Return the active species from the summary UI.
  */
 exports.getSpeciesFromUi = function() {
-  var startHours = $('#start-time-species-hours').val();
-  var startMins = $('#start-time-species-mins').val();
-  var startTime = startHours + ':' + startMins;
-
-  var endHours = $('#end-time-species-hours').val();
-  var endMins = $('#end-time-species-mins').val();
-  var endTime = endHours + ':' + endMins;
-
-  var species = $('#species').val();
-  var number = $('#species_number').val();
+  var startTime = $('#species-summary-start-time').attr('__data');
+  var endTime = $('#species-summary-end-time').attr('__data');
+  var species = $('#species-summary-name').attr('__data');
+  var number = $('#species-summary-number').attr('__data');
 
   var date = urls.getFollowDateFromUrl();
   var focalId = urls.getFocalChimpIdFromUrl();
diff --git a/app/assets/js/jgiNewFollowBundle.js b/app/assets/js/jgiNewFollowBundle.js
--- a/app/assets/js/jgiNewFollowBundle.js
+++ b/app/assets/js/jgiNewFollowBundle.js
@@ -1127,16 +1127,6 @@
   '56-2:45J'
 ];
 
-/**
- * Convert hours an mins integers to a zero-padded string. 1,5, would become:
- * '01:05'.
- */
-function convertToTime(hours, mins) {
-  var hoursStr = exports.convertToStringWithTwoZeros(hours);
-  var minsStr = exports.convertToStringWithTwoZeros(mins);
-  return hoursStr + ':' + minsStr;
-}
-
 
 function sortItemsWithDate(objects) {
   objects.sort(function(a, b) {
@@ -1226,52 +1216,78 @@
   sortItemsWithDate(intervals);
 };
 
+
+/**
+ * Return the next time point from the given database-facing time. Throws an
+ * error if canIncrementTime returns false.
+ */
 exports.incrementTime = function(time) {
-
-  var interval = 15;
-  var parts = time.split(':');
-  var hours = parseInt(parts[0]);
-  var mins = parseInt(parts[1]);
-  var maybeTooLarge = mins + interval;
-
-  if (maybeTooLarge > 59) {
-    // then we've overflowed our time system.
-    mins = maybeTooLarge % 60;
-    // Don't worry about overflowing hours. Not going to worry about
-    // late night chimp monitoring.
-    hours = hours + 1;
-  } else {
-    mins = maybeTooLarge;
+  if (!exports.canIncrementTime(time)) {
+    throw 'cannot increment time: ' + time;
   }
-
-  // Format these strings to be two digits.
-  var hoursStr = exports.convertToStringWithTwoZeros(hours);
-  var minsStr = exports.convertToStringWithTwoZeros(mins);
-  var result = hoursStr + ':' + minsStr;
+  var index = times.indexOf(time);
+  var result = times[index + 1];
   return result;
-
 };
 
 
 /**
- * Get an array of the times that fall within an interval. If you passed
- * '7:00', this would return an array of ['mm', '7:00', '7:01', ..., '7:14'].
+ * Take a database-facing time (e.g. 05-12:12J) and return an array of objects
+ * with a 'dbTime' and 'userTime' value, corresponding to time points in the
+ * interval specified by the dbTime parameter.
+ *
+ * The dbTime keys will have the prefix include '.00' to '.14' to accommodate
+ * direct string comparisons. For instance, the time '00-12:00A' would return
+ * an array like:
+ * [
+ *   {dbTime: 00.00-12:00A, userTime: 12:00A},
+ *   {dbTime: 00.01-12:01A, userTime: 12:01A},
+ *   ...
+ *   {dbTime: 00.14-12:14A, userTime: 12:14A}
+ * ]
  */
-exports.getTimesInInterval = function(time) {
-  var interval = 15;
-  var parts = time.split(':');
-  var hours = parseInt(parts[0]);
-  var mins = parseInt(parts[1]);
-
-  var result = ['mm'];
-  // Fow now, assume our start times begin at 0, 15, 30, 45. This will prevent
-  // us having to worry about overflowing.
-  for (var i = 0; i < mins + interval; i++) {
-    var newMins = mins + i;
-    var nextTime = convertToTime(hours, newMins);
-    result.push(nextTime);
-  }
-  
+exports.getDbAndUserTimesInInterval = function(dbTime) {
+  var dashIndex = dbTime.indexOf('-');
+  var colonIndex = dbTime.indexOf(':');
+
+  var prefix = dbTime.substring(0, dashIndex);
+  var hour = dbTime.substring(dashIndex + 1, colonIndex);
+  // Everything at the end.
+  var period = dbTime.substring(colonIndex + 2);
+
+  // Keeping these as arrays is kind of lazy, but it is foolproof until we
+  // change the intervals.
+  var minutes = [
+    '00',
+    '01',
+    '02',
+    '03',
+    '04',
+    '05',
+    '06',
+    '07',
+    '08',
+    '09',
+    '10',
+    '11',
+    '12',
+    '13',
+    '14'
+  ];
+
+  var result = [];
+
+  minutes.forEach(function(val) {
+    var newUserTime = hour + ':' + val + period;
+    var newPrefix = prefix + '.' + val;
+    var newDbTime = newPrefix + newUserTime;
+
+    var timePoint = {};
+    timePoint.dbTime = newDbTime;
+    timePoint.userTime = newUserTime;
+    result.push(timePoint);
+  });
+
   return result;
 };
 
@@ -1311,25 +1327,36 @@
 };
 
 
+exports.canIncrementTime = function(time) {
+  var index = times.indexOf(time);
+  if (index < 0 || index === times.length) {
+    return false;
+  } else {
+    return true;
+  }
+};
+
+
+exports.canDecrementTime = function(time) {
+  var index = times.indexOf(time);
+  if (index < 0 || index === 0) {
+    return false;
+  } else {
+    return true;
+  }
+};
+
+
+/**
+ * Return the previous time point for the given database-facing time. Throws an
+ * error if canDecrementTime returns False.
+ */
 exports.decrementTime = function(time) {
-  var interval = 15;
-  var parts = time.split(':');
-  var hours = parseInt(parts[0]);
-  var mins = parseInt(parts[1]);
-  var maybeTooSmall = mins - interval;
-
-  if (maybeTooSmall < 0) {
-    // negative time
-    mins = 60 + maybeTooSmall;
-    hours = (hours === 24) ? 0 : (hours - 1);
-  } else {
-    mins = maybeTooSmall;
+  if (!exports.canDecrementTime(time)) {
+    throw 'cannot decrement time: ' + time;
   }
-
-  var hoursStr = exports.convertToStringWithTwoZeros(hours);
-  var minsStr = exports.convertToStringWithTwoZeros(mins);
-  var result = hoursStr + ':' + minsStr;
-  return result;
+  var index = times.indexOf(time);
+  return times[index - 1];
 };
 
 
diff --git a/app/assets/js/jgiUtil.js b/app/assets/js/jgiUtil.js
--- a/app/assets/js/jgiUtil.js
+++ b/app/assets/js/jgiUtil.js
@@ -66,16 +66,6 @@
   '56-2:45J'
 ];
 
-/**
- * Convert hours an mins integers to a zero-padded string. 1,5, would become:
- * '01:05'.
- */
-function convertToTime(hours, mins) {
-  var hoursStr = exports.convertToStringWithTwoZeros(hours);
-  var minsStr = exports.convertToStringWithTwoZeros(mins);
-  return hoursStr + ':' + minsStr;
-}
-
 
 function sortItemsWithDate(objects) {
   objects.sort(function(a, b) {
@@ -122,16 +112,13 @@
 };
 
 
+/**
+ * Convert a time like '14.01-12:12J' to a completely user-facing time.
+ */
 exports.getUserTimeFromDbTime = function(dbTime) {
-  var userTimes = exports.getAllTimesForUser();
-  var dbTimes = exports.getAllTimesForDb();
-
-  var index = dbTimes.indexOf(dbTime);
-  if (index < 0) {
-    throw 'Unrecognized db time: ' + dbTime;
-  }
-
-  return userTimes[index];
+  var dashIndex = dbTime.indexOf('-');
+  var result = dbTime.substring(dashIndex + 1);
+  return result;
 };
 
 
@@ -181,24 +168,62 @@
 
 
 /**
- * Get an array of the times that fall within an interval. If you passed
- * '7:00', this would return an array of ['mm', '7:00', '7:01', ..., '7:14'].
+ * Take a database-facing time (e.g. 05-12:12J) and return an array of objects
+ * with a 'dbTime' and 'userTime' value, corresponding to time points in the
+ * interval specified by the dbTime parameter.
+ *
+ * The dbTime keys will have the prefix include '.00' to '.14' to accommodate
+ * direct string comparisons. For instance, the time '00-12:00A' would return
+ * an array like:
+ * [
+ *   {dbTime: 00.00-12:00A, userTime: 12:00A},
+ *   {dbTime: 00.01-12:01A, userTime: 12:01A},
+ *   ...
+ *   {dbTime: 00.14-12:14A, userTime: 12:14A}
+ * ]
  */
-exports.getTimesInInterval = function(time) {
-  var interval = 15;
-  var parts = time.split(':');
-  var hours = parseInt(parts[0]);
-  var mins = parseInt(parts[1]);
+exports.getDbAndUserTimesInInterval = function(dbTime) {
+  var dashIndex = dbTime.indexOf('-');
+  var colonIndex = dbTime.indexOf(':');
 
-  var result = ['mm'];
-  // Fow now, assume our start times begin at 0, 15, 30, 45. This will prevent
-  // us having to worry about overflowing.
-  for (var i = 0; i < mins + interval; i++) {
-    var newMins = mins + i;
-    var nextTime = convertToTime(hours, newMins);
-    result.push(nextTime);
-  }
-  
+  var prefix = dbTime.substring(0, dashIndex);
+  var hour = dbTime.substring(dashIndex + 1, colonIndex);
+  // Everything at the end.
+  var period = dbTime.substring(colonIndex + 3);
+
+  // Keeping these as arrays is kind of lazy, but it is foolproof until we
+  // change the intervals.
+  var minutes = [
+    '00',
+    '01',
+    '02',
+    '03',
+    '04',
+    '05',
+    '06',
+    '07',
+    '08',
+    '09',
+    '10',
+    '11',
+    '12',
+    '13',
+    '14'
+  ];
+
+  var result = [];
+
+  minutes.forEach(function(val) {
+    var newUserTime = hour + ':' + val + period;
+    var newPrefix = prefix + '.' + val;
+    var newDbTime = newPrefix + '-' + newUserTime;
+
+    var timePoint = {};
+    timePoint.dbTime = newDbTime;
+    timePoint.userTime = newUserTime;
+    result.push(timePoint);
+  });
+
   return result;
 };
 
